import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/services.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'iOS Context Menu Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: IOSStyleMessagesScreen(),
    );
  }
}

class IOSStyleMessagesScreen extends StatefulWidget {
  @override
  _IOSStyleMessagesScreenState createState() => _IOSStyleMessagesScreenState();
}

class _IOSStyleMessagesScreenState extends State<IOSStyleMessagesScreen> {
  final List<Message> messages = [
    Message('Привет! Как дела?', true, '10:30'),
    Message('Отлично, спасибо! А у тебя?', false, '10:32'),
    Message('Тоже хорошо! Встречаемся сегодня?', true, '10:33'),
    Message('Да, конечно! В какое время?', false, '10:35'),
    Message('Давай в 18:00 в обычном месте', true, '10:36'),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F2F7),
      appBar: AppBar(
        title: Text('Чат', style: TextStyle(color: Colors.black)),
        backgroundColor: Color(0xFFF2F2F7),
        elevation: 0,
        centerTitle: true,
      ),
      body: ListView.builder(
        padding: EdgeInsets.all(16),
        itemCount: messages.length,
        itemBuilder: (context, index) {
          return MessageBubble(
            message: messages[index],
            onReply: () => _handleAction('Ответить', messages[index]),
            onCopy: () => _handleAction('Скопировать', messages[index]),
            onForward: () => _handleAction('Переслать', messages[index]),
            onDelete: () => _handleAction('Удалить', messages[index]),
          );
        },
      ),
    );
  }

  void _handleAction(String action, Message message) {
    if (action == 'Скопировать') {
      Clipboard.setData(ClipboardData(text: message.text));
    }
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$action: "${message.text}"'),
        duration: Duration(seconds: 2),
      ),
    );
  }
}

class MessageBubble extends StatelessWidget {
  final Message message;
  final VoidCallback onReply;
  final VoidCallback onCopy;
  final VoidCallback onForward;
  final VoidCallback onDelete;

  const MessageBubble({
    Key? key,
    required this.message,
    required this.onReply,
    required this.onCopy,
    required this.onForward,
    required this.onDelete,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: message.isSent ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: EdgeInsets.only(bottom: 8),
        child: CupertinoContextMenu(
          actions: [
            CupertinoContextMenuAction(
              onPressed: () {
                Navigator.pop(context);
                onReply();
              },
              trailingIcon: CupertinoIcons.reply,
              child: Text('Ответить'),
            ),
            CupertinoContextMenuAction(
              onPressed: () {
                Navigator.pop(context);
                onCopy();
              },
              trailingIcon: CupertinoIcons.doc_on_clipboard,
              child: Text('Скопировать'),
            ),
            CupertinoContextMenuAction(
              onPressed: () {
                Navigator.pop(context);
                onForward();
              },
              trailingIcon: CupertinoIcons.arrow_turn_up_right,
              child: Text('Переслать'),
            ),
            CupertinoContextMenuAction(
              onPressed: () {
                Navigator.pop(context);
                onDelete();
              },
              isDestructiveAction: true,
              trailingIcon: CupertinoIcons.delete,
              child: Text('Удалить'),
            ),
          ],
          child: Container(
            constraints: BoxConstraints(maxWidth: 250),
            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 10),
            decoration: BoxDecoration(
              color: message.isSent 
                ? Color(0xFF007AFF)
                : Colors.white,
              borderRadius: BorderRadius.circular(18),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 5,
                  offset: Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  message.text,
                  style: TextStyle(
                    color: message.isSent ? Colors.white : Colors.black,
                    fontSize: 16,
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  message.time,
                  style: TextStyle(
                    color: message.isSent 
                      ? Colors.white.withOpacity(0.7)
                      : Colors.grey,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// Альтернативный вариант с кастомным контекстным меню
class CustomContextMenuBubble extends StatefulWidget {
  final Message message;
  final VoidCallback onReply;
  final VoidCallback onCopy;
  final VoidCallback onForward;
  final VoidCallback onDelete;

  const CustomContextMenuBubble({
    Key? key,
    required this.message,
    required this.onReply,
    required this.onCopy,
    required this.onForward,
    required this.onDelete,
  }) : super(key: key);

  @override
  _CustomContextMenuBubbleState createState() => _CustomContextMenuBubbleState();
}

class _CustomContextMenuBubbleState extends State<CustomContextMenuBubble> 
    with SingleTickerProviderStateMixin {
  OverlayEntry? _overlayEntry;
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;
  Offset _tapPosition = Offset.zero;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: Duration(milliseconds: 200),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutBack,
    ));
    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _showContextMenu(BuildContext context) {
    HapticFeedback.mediumImpact();
    
    _overlayEntry = OverlayEntry(
      builder: (context) => GestureDetector(
        onTap: _hideContextMenu,
        child: Container(
          color: Colors.black.withOpacity(0.4),
          child: Stack(
            children: [
              Positioned(
                left: _tapPosition.dx - 100,
                top: _tapPosition.dy - 200,
                child: AnimatedBuilder(
                  animation: _animationController,
                  builder: (context, child) {
                    return Transform.scale(
                      scale: _scaleAnimation.value,
                      child: Opacity(
                        opacity: _opacityAnimation.value,
                        child: Container(
                          width: 200,
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(14),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.2),
                                blurRadius: 20,
                                offset: Offset(0, 10),
                              ),
                            ],
                          ),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(14),
                            child: Column(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                _buildMenuItem(
                                  icon: CupertinoIcons.reply,
                                  label: 'Ответить',
                                  onTap: () {
                                    _hideContextMenu();
                                    widget.onReply();
                                  },
                                ),
                                _buildDivider(),
                                _buildMenuItem(
                                  icon: CupertinoIcons.doc_on_clipboard,
                                  label: 'Скопировать',
                                  onTap: () {
                                    _hideContextMenu();
                                    widget.onCopy();
                                  },
                                ),
                                _buildDivider(),
                                _buildMenuItem(
                                  icon: CupertinoIcons.arrow_turn_up_right,
                                  label: 'Переслать',
                                  onTap: () {
                                    _hideContextMenu();
                                    widget.onForward();
                                  },
                                ),
                                _buildDivider(),
                                _buildMenuItem(
                                  icon: CupertinoIcons.delete,
                                  label: 'Удалить',
                                  color: Colors.red,
                                  onTap: () {
                                    _hideContextMenu();
                                    widget.onDelete();
                                  },
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );

    Overlay.of(context).insert(_overlayEntry!);
    _animationController.forward();
  }

  void _hideContextMenu() {
    _animationController.reverse().then((_) {
      _overlayEntry?.remove();
      _overlayEntry = null;
    });
  }

  Widget _buildMenuItem({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    Color color = Colors.black,
  }) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          child: Row(
            children: [
              Icon(icon, size: 20, color: color),
              SizedBox(width: 12),
              Text(
                label,
                style: TextStyle(
                  fontSize: 16,
                  color: color,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildDivider() {
    return Container(
      height: 0.5,
      color: Colors.grey.withOpacity(0.3),
    );
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onLongPressStart: (details) {
        setState(() {
          _tapPosition = details.globalPosition;
        });
        _showContextMenu(context);
      },
      child: Align(
        alignment: widget.message.isSent 
          ? Alignment.centerRight 
          : Alignment.centerLeft,
        child: Container(
          margin: EdgeInsets.only(bottom: 8),
          constraints: BoxConstraints(maxWidth: 250),
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 10),
          decoration: BoxDecoration(
            color: widget.message.isSent 
              ? Color(0xFF007AFF)
              : Colors.white,
            borderRadius: BorderRadius.circular(18),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 5,
                offset: Offset(0, 2),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                widget.message.text,
                style: TextStyle(
                  color: widget.message.isSent ? Colors.white : Colors.black,
                  fontSize: 16,
                ),
              ),
              SizedBox(height: 4),
              Text(
                widget.message.time,
                style: TextStyle(
                  color: widget.message.isSent 
                    ? Colors.white.withOpacity(0.7)
                    : Colors.grey,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Простой вариант с PopupMenuButton
class SimpleContextMenuBubble extends StatelessWidget {
  final Message message;
  final VoidCallback onReply;
  final VoidCallback onCopy;
  final VoidCallback onForward;
  final VoidCallback onDelete;

  const SimpleContextMenuBubble({
    Key? key,
    required this.message,
    required this.onReply,
    required this.onCopy,
    required this.onForward,
    required this.onDelete,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: message.isSent ? Alignment.centerRight : Alignment.centerLeft,
      child: GestureDetector(
        onLongPress: () {
          HapticFeedback.mediumImpact();
          final RenderBox overlay = 
              Overlay.of(context).context.findRenderObject() as RenderBox;
          
          showMenu(
            context: context,
            position: RelativeRect.fromLTRB(100, 200, 100, 200),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            items: [
              PopupMenuItem(
                onTap: onReply,
                child: Row(
                  children: [
                    Icon(CupertinoIcons.reply, size: 20),
                    SizedBox(width: 12),
                    Text('Ответить'),
                  ],
                ),
              ),
              PopupMenuItem(
                onTap: onCopy,
                child: Row(
                  children: [
                    Icon(CupertinoIcons.doc_on_clipboard, size: 20),
                    SizedBox(width: 12),
                    Text('Скопировать'),
                  ],
                ),
              ),
              PopupMenuItem(
                onTap: onForward,
                child: Row(
                  children: [
                    Icon(CupertinoIcons.arrow_turn_up_right, size: 20),
                    SizedBox(width: 12),
                    Text('Переслать'),
                  ],
                ),
              ),
              PopupMenuItem(
                onTap: onDelete,
                child: Row(
                  children: [
                    Icon(CupertinoIcons.delete, size: 20, color: Colors.red),
                    SizedBox(width: 12),
                    Text('Удалить', style: TextStyle(color: Colors.red)),
                  ],
                ),
              ),
            ],
          );
        },
        child: Container(
          margin: EdgeInsets.only(bottom: 8),
          constraints: BoxConstraints(maxWidth: 250),
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 10),
          decoration: BoxDecoration(
            color: message.isSent 
              ? Color(0xFF007AFF)
              : Colors.white,
            borderRadius: BorderRadius.circular(18),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 5,
                offset: Offset(0, 2),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                message.text,
                style: TextStyle(
                  color: message.isSent ? Colors.white : Colors.black,
                  fontSize: 16,
                ),
              ),
              SizedBox(height: 4),
              Text(
                message.time,
                style: TextStyle(
                  color: message.isSent 
                    ? Colors.white.withOpacity(0.7)
                    : Colors.grey,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class Message {
  final String text;
  final bool isSent;
  final String time;

  Message(this.text, this.isSent, this.time);
}